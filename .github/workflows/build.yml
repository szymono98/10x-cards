name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test

    steps:
      - name: Verify branch
        run: git branch -a | cat

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          # Instaluj bezpośrednio wymagane pakiety, aby upewnić się, że są dostępne
          npm install -D tailwindcss@3.3.3 postcss@8.4.27 autoprefixer@10.4.14

      # Dodane kroki diagnostyczne
      - name: Verify installed modules
        run: |
          echo "Checking for tailwindcss module..."
          npm list tailwindcss || true
          echo "Checking PostCSS module..."
          npm list postcss || true
          echo "Checking Node modules directory..."
          ls -la node_modules || true

      # Install prettier explicitly to ensure it's available
      - name: Install prettier
        run: npm install --no-save prettier

      - name: Run linter
        run: npm run lint

      # Format check that doesn't fail the build
      - name: Check code formatting
        id: prettier-check
        run: npx prettier --check --ignore-path .gitignore . || echo "Formatting issues detected"
        continue-on-error: true

      # Generate formatting report
      - name: Generate format report
        if: steps.prettier-check.outcome == 'failure'
        run: |
          echo "::warning::Code style issues found. Consider running 'npm run format:fix' locally."
          echo "Files with formatting issues:" > format-report.txt
          npx prettier --list-different --ignore-path .gitignore . >> format-report.txt
          cat format-report.txt

      # Upload format report as an artifact
      - name: Upload format report
        if: steps.prettier-check.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: format-report
          path: format-report.txt
          retention-days: 5

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./coverage
            ./test-results
          retention-days: 5

  build:
    name: Build Production
    needs: quality-check
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install --no-fund --no-audit

      - name: Run CI setup script
        run: node setup-ci.mjs

      # Dodatkowy krok, który sprawdza zawartość pliku package.json
      - name: Check package.json content
        run: |
          echo "Package.json content:"
          cat package.json
          echo "------------"
          echo "Checking dependencies:"
          grep -A 20 "devDependencies" package.json

      # Dodatkowy krok, który zainstaluje wymagane zależności bezpośrednio przed budowaniem
      - name: Install critical dependencies
        run: |
          echo "Installing critical dependencies directly..."
          npm install -D tailwindcss@3.3.3 postcss@8.4.27 autoprefixer@10.4.14
          echo "Checking if installation succeeded:"
          npm list tailwindcss postcss autoprefixer

      # Dodatkowy krok, który bezpośrednio przygotuje tailwindcss przed budowaniem
      - name: Prepare Tailwind CSS
        run: |
          echo "Inicjalizacja Tailwind CSS..."
          # Upewnij się, że globalne pliki CSS istnieją
          mkdir -p src/app
          if [ ! -f "src/app/globals.css" ]; then
            echo "@tailwind base;\n@tailwind components;\n@tailwind utilities;" > src/app/globals.css
          fi
          # Wygeneruj plik CSS
          npx tailwindcss -i ./src/app/globals.css -o ./src/app/tailwind.css --minify
          echo "Tailwind CSS zainicjalizowany."

      - name: Verify tailwindcss installation
        run: |
          echo "Checking for tailwindcss module..."
          npm list tailwindcss
          echo "Lokalne uruchomienie tailwindcss przez npx:"
          npx tailwindcss --help
          echo "Content of PostCSS config:"
          cat postcss.config.mjs
          echo "Content of Tailwind config:"
          cat tailwind.config.ts

      - name: Build production
        run: npm run build
